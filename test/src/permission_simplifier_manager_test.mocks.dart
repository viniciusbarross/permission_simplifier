// Mocks generated by Mockito 5.4.6 from annotations
// in permission_simplifier/test/src/simple_permission_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler_platform_interface/permission_handler_platform_interface.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [PermissionHandlerPlatform].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionHandlerPlatform extends _i1.Mock
    implements _i2.PermissionHandlerPlatform {
  MockPermissionHandlerPlatform() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.PermissionStatus> checkPermissionStatus(
          _i2.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPermissionStatus,
          [permission],
        ),
        returnValue:
            _i3.Future<_i2.PermissionStatus>.value(_i2.PermissionStatus.denied),
      ) as _i3.Future<_i2.PermissionStatus>);

  @override
  _i3.Future<_i2.ServiceStatus> checkServiceStatus(
          _i2.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkServiceStatus,
          [permission],
        ),
        returnValue:
            _i3.Future<_i2.ServiceStatus>.value(_i2.ServiceStatus.disabled),
      ) as _i3.Future<_i2.ServiceStatus>);

  @override
  _i3.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<Map<_i2.Permission, _i2.PermissionStatus>> requestPermissions(
          List<_i2.Permission>? permissions) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermissions,
          [permissions],
        ),
        returnValue:
            _i3.Future<Map<_i2.Permission, _i2.PermissionStatus>>.value(
                <_i2.Permission, _i2.PermissionStatus>{}),
      ) as _i3.Future<Map<_i2.Permission, _i2.PermissionStatus>>);

  @override
  _i3.Future<bool> shouldShowRequestPermissionRationale(
          _i2.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #shouldShowRequestPermissionRationale,
          [permission],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
